package ronan_hanley.inside_av.weapons_systems;

import java.util.ArrayList;

import org.newdawn.slick.Color;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;

import ronan_hanley.inside_av.InsideAV;
import ronan_hanley.inside_av.QuadraticDamageSource;
import ronan_hanley.inside_av.enemy.Enemy;

public abstract class LaserWeaponSystem extends WeaponSystem {
	public static final double COST = 200;
	private ArrayList<Enemy> enemies;
	// the distance an enemy is outside where they take no damage from the laser
	private static final int DAMAGE_RADIUS = InsideAV.TILE_SIZE * 6;
	
	public LaserWeaponSystem(int x, int y, Image sprite, ArrayList<Enemy> enemies) {
		super(x, y, sprite);
	}
	
	@Override
	public void update(ArrayList<Enemy> enemies) {
		super.update(enemies);
		
		target = WeaponSystem.findCentralEnemy(enemies);
		setAngle(0);
		
		/* damage enemies touching the laser, based on their distance
		 * to it.
		 * 
		 * given a point (m, n) and a line Ax + By + C = 0,
		 * distance = |Am + Bn + C| / sqrt(A^2 + A^2)
		 */
		
		int centerX = getX() + InsideAV.HALF_TILE_SIZE;
		int centerY = getY() + InsideAV.HALF_TILE_SIZE;
		
		QuadraticDamageSource damageSource = new QuadraticDamageSource(centerX, centerY, getMaxDamage(), DAMAGE_RADIUS);
		
		double A = Math.sin(getAngle()) / Math.cos(getAngle());
		double B = -1;
		double C = centerY - A * centerX;
		
		for (Enemy enemy : enemies) {
			double m = enemy.getX() + InsideAV.HALF_TILE_SIZE;
			double n = enemy.getY() + InsideAV.HALF_TILE_SIZE;
			
			// distance to the line
			double distance = Math.abs(A*m + B * n + C) / Math.sqrt(Math.pow(A, 2) + Math.pow(B, 2));
			
			if (distance <= InsideAV.TILE_SIZE / 4) {
				/* enemy touching laser; damage it based off
				 * how far it is from the weapon
				 */
				
				damageSource.damageEnemy(enemy);
			}
		}
	}
	
	@Override
	public void render(Graphics g) {
		super.render(g);
		
		if (target != null) {
			// draw the laser
			
			g.setColor(Color.red);
			
			// long enough to always reach the end of the screen
			int laserLen = 2 * InsideAV.SCREEN_HEIGHT;
			int laserLenX = (int) (Math.cos(getAngle()) * laserLen);
			int laserLenY = (int) (Math.sin(getAngle()) * laserLen);
			
			int centerX = getX() + InsideAV.HALF_TILE_SIZE;
			int centerY = getY() + InsideAV.HALF_TILE_SIZE;
			g.drawLine(centerX, centerY, centerX + laserLenX, centerY+ laserLenY);
		}
		
	}
	
	@Override
	public double getCost() {
		return COST;
	}
	
	@Override
	public void fire() {
		// TODO this method
	}
	
	@Override
	public void playShootSound() {
		// TODO this method (looping burning sound)
	}
	
	/**
	 * How much damage is done to an enemy on top of the weapon
	 * 
	 * (damage falls off with distance)
	 * @return
	 */
	public abstract int getMaxDamage();
	
}
